{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","temp_min","max","temp_max","temp_description","Form","onSubmit","loadWeather","type","name","autoComplete","placeholder","required","App","getWeather","e","a","preventDefault","target","value","country","fetch","api_call","json","response","cod","alert","message","setState","sys","celsius","calcelsius","main","temp","description","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","this","error","notFound","Math","floor","rangeID","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.543052d0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  function minmaxTemp(min, max) {\r\n    return (\r\n      <h3>\r\n        {min ? <span className=\"px-4\">{min}&deg;</span> : null}\r\n        {max ? <span className=\"px-4\">{max}&deg;</span> : null}\r\n      </h3>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={\"wi \" + props.weatherIcon + \" display-1\"}></i>\r\n        </h5>\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n        <h4 className=\"py-4\">{props.temp_description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 pt-3\">\r\n            <button className=\"btn btn-warning mt-md-0 text-md-left\">\r\n              Get Weather\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./components/form.component\";\nimport \"./components/form.style.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n    };\n    //this.getWeather();\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n  clear() {\n    this.setState({ error: false, notFound: false });\n  }\n  calcelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n  get_WeatherIcon(icon, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 700 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.city.value;\n    const country = e.target.country.value;\n    //console.log(city);\n    //const city = \"Ranchi\";\n    //const country = \"India\";\n    const api_call = await fetch(\n      \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n        city +\n        \",\" +\n        country +\n        \"&appid=9d44042f10bae751a871e91407cb724c\"\n    );\n    const response = await api_call.json();\n    if (response.cod === \"404\") {\n      alert(response.message);\n    } else {\n      this.setState({\n        city: response.name + \",\" + response.sys.country,\n        //country: response.sys.country,\n        celsius: this.calcelsius(response.main.temp),\n        temp_max: this.calcelsius(response.main.temp_max),\n        temp_min: this.calcelsius(response.main.temp_min),\n        description: response.weather[0].description,\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    }\n  };\n  onChangeError() {\n    this.setState({ error: false });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          temp_description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}